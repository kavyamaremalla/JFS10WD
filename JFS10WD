1. tasks from guvi end -> 10-15 tasks, module assessmemt (skill enhancement)
2. mini project, capstone project 
3. assessment

Java Full Stack --> 

backend & front end -> Java
data base -> you store your data (personal & confidential)

Intro to Java. -> web,mobile,desktop apps development,
platform independent -> runs on any OS
OOPS -> follows object oriented programming lang

JVM , JDK, JRE ->

JVM -> load, verfiy, execute code & provide runtime environment
JRE -> implementation of JVM.. libraries + files -> Sun Microsystems
JDK -> JRE + some other tools like javac, java etc..
	Open JDK vs Oracle/Amazon Corretto JDK..
	Javadoc, jar, javac, load java it has tools

JEP -> Java Enhancement Proposal..
	irregular -> Java 6 : 2007, Java 7 : 2011, Java 8 : 2014, Java 9 : 2017.. Java 22 : 2024
	LTS -> java 8, 11, 17, 21 (current lts version)
	every six months i.e., march & september.. minor versions non-lts versions..
	march 12 & sept had java 13.. 12 will be supported until 13 release..

backward compatability ->

Installation of Java & IDE.

	Install JDK -> Amazon Corretto, Oracle or any other provider.. Go with Java 11 or Java 17
		java -version in command prompt
	check environment & system variable -> path to your java.. add JAVA_HOME, also add in path if not present


task : run a java file in your local machine without using an IDE & with using IDE.

Install IDE -> eclipse or sts or IntelliJ or any other tool you wish..

Java Basics :

	class -> blueprint
	object -> car ==> attributes : weight, color., methods/functionx -> drive, brakes
 	
 	Variables : to store data values

 	 //local, global/instance, static

    int price = 700; //instance or global variable

    static int m = 100; // static variable -> memory allocated once when class is loaded in memory

    public static void main(String[] args) {

        Car car = new Car();

        car.price =90; //object-level or instance variable

        int x = 80; //local variable

//        price = 90;
         m = 90;
    }

   public void add(){
        int sum = 100; //local variable
        m = 999;
    }

 	Primitive Data types : byte, short, int, long, float, double, boolean, char
 		-> predefined, immutable, stored in stack memory, store single values

 	Non-primitive	-> stores multiple values, user-defined,  mutable, stored in heap memory
 		String, Array, Object etc

 	Wrapper Classes -> collection, generics, autoboxing -> primitive to wrapper, unboxing is vice versa
 		Integer, Double, Long, Float etc built on primitive data types
 			

 		String -> text in ->  "double quotes"  -> "100 Marks"
 		int -> whole numbers
 		float -> 110.09f
 		char -> character -> 'a' -> one alphabet in single quote
 		boolean -> true/false
 		double val = 190.09; -> 8 bytes of memory
        float flVal = 190.09f; -> 4bytes of memory
        long longVal = 198081893786387457L;; -> 8 bytes of memory
        byte byteVal = 0; -> -128 to 127
        short  shortVal = 100;

        Non-primitive Datatypes: String


 	compile time & run time -> compile == while writing the code, run-time -> when you run/execute the code.


 Type Casting -> converting from one data type to other data type
 
 Example :  Widening & Narrow Casting


        
    //byte < short < char < int < long < float < double

    widening:

        int myInt = 8;
        double myDoubValue = myInt; //Automatic casting

//        System.out.println(myInt);
//        System.out.println(myDoubValue);

	narrow

        double db1 = 9.67d;
        int intVal = (int) db1; // manual cast

        System.out.println(db1);
        System.out.println(intVal);

Operators : Arithmetic, assignment, comparison, logical, bitwise

	 int result = 100 + 700;
        
        String output = "Hi " + "Welcome"; -> concatenation/concatinate

        System.out.println(result);
        System.out.println(output);

     Postfix :
     
      int x = 1, j;
       j = x++;

        System.out.println(j + " " + x );


        logical operators:

      int age = 17;

        System.out.println(age > 18 && age < 100);//false
        System.out.println(age > 18 || age < 100);//true
        System.out.println(!(age > 18 || age < 100));//false   

        Scanner :

         Scanner scanner = new Scanner(System.in);

        System.out.println("Please enter your age ");

        int age = scanner.nextInt();
        

        System.out.println(age > 18 && age < 100);//false
        System.out.println(age > 18 || age < 100);//true
        System.out.println(!(age > 18 || age < 100));//false

Conditional/Control statements: after this terenary operator

Decision -> if/switch -> if, if-else, if & else if, nested if
loop -> while, do while, for, for-each
jump -> break, continue, return

18/07/24 : 

Debugging a class -> scanner and nested-if example.

Naming conventions :

	class -> start with capital letter -> upper camel case 
		SwitchCaseExample
	variable/function/ method name -> starts with small letter
		int age;
		public void sum(){}
	checking account balance method-> checkAccountBalance -> lower camel case
	car -> applyBrakesForCar

Switch :

import java.util.Scanner;

public class SwitchCaseExample {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter day in a week ");
//        char dayOfWeek = scanner.next().charAt(0);

        String dayOfWeek = scanner.next();

        switch (dayOfWeek){
            case "Monday" :
                System.out.println("Day 1");
                break;
            case "Tuesday" :
                add();
                System.out.println("Day 2");
                break;
            case "Wednesday" :
                System.out.println("Day 3");
                break; //keyword
            default:
                System.out.println("Please check your input");
        }


    }

    public static void add(){
        System.out.println("Inside add");
    }
}

For loop :

 System.out.println("Started for loop execution");

        for(int i = 5; i <10; i++){
            System.out.println(i);
        }

        System.out.println("For loop ended");

Nested-for :

    for(int i = 1; i <= 3; i++){ // 1, 2, 3
            for (int j = 1; j <= 3 ; j++) {
                System.out.println(i + " " + j); // 1 1 , 2, 3:::: 2 1 2 3 :::  3, 1, 2, 3
            }// ends i loop
        } // ends j loop        

 int i =3;

        System.out.println(i);
        System.out.println(i++);
        System.out.println(i);
        System.out.println(++i);


for-each/enhanced-for loop : to iterate over collections  


        int arr[] = {1,2,51,62,86,98};

        for(int i : arr){
            System.out.println(i);
        } 

int[] arrayOfNumbers = {1,2,51,62,86,98};

        for(int integerValue : arrayOfNumbers){
            System.out.println(integerValue);
        }


        System.out.println("*******************************************");

        for (int i=0; i < arrayOfNumbers.length ; i++){
            System.out.println(arrayOfNumbers[i]);
        }
 infinite for loop -> 
 
     for( ;  ; ){

            System.out.println("Inside for loop");
        }       

 while loop :
 
  int i = 1;

        while (i< 10){
            System.out.println(i);
            ++i;
        }

do-while loop:

 int i = 1;
       
       do{
           System.out.println(i);
           i++;
       }while (i<=10);


break, return & continue :

  public static void main(String[] args) {
        for (int i = 0; i <=10 ; i++) {
            if(i==5){
//                return;
//                continue;
                break;
            }
            System.out.println(i);
        }

        calculateEngineCC(20);
    }

    public static int calculateEngineCC(int weight){
        int capacity = weight * 1000;
        System.out.println(capacity);
        return capacity;
    }       


Ternary Operator :

 String result = age >= 18 ? "Eligible to vote"  : "Please check next time, not-eligible" ;

 Math Operations

 Literals -> Integer, Character, Boolean, String

 	int price = 750; // 750 -> literal

Main method:

    public static void main(String[] args) {
    }

    public -> to call this method from anywhere by JVM
    static -> can be called without creating an object of the class & memory will be allocated to this..
    void -> no return value to JVM
    main -> name of method
    String[] args -> one argument/parameter of type String array
Keywords
	void -> no return type
	static -> memory allocated first to this method

22/7/24 :
Arrays :
Create Arrays :

String[] carBrands = {"Volvo", "Hyundai", "Kia" , String.valueOf(7)};

Integer[] carPrice = {76, 89, 90, 12, Integer.parseInt("45")};

Read Ops on Array:

Index -> position of an element & starts with 0

    array[indexPosition] -> return element in that particular position

    carBrands[4] -> ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    carBrands.length -> length of the array (here it's 4)

    Read an array -> Arrays.toString(carBrands)

    for/for-each on array -> reads elements separately

Update ->

    nameOfArray[indexPositionToUpdate]  = updatedValue

Delete an element from array without conversion to array list.

Removing element from array & insert an element into array without using arraylist

create objects

    1. using new keyword
    2. using new instance
    3. using clone() method
    4. using deserialization
    5. using newInstance() of constructor class

23/07/24    

Access Modifiers -> public, private, protected, default
	- class, method, variables & constructors

package -> group of classes within same space

array sorting -> with and without in-built sort method	
array compares
array equals, fill

Strings : 

	 - charAt(), compareTo(), compareToIgnoreCase(), concat(),contains(), toLowerCase , toUpperCase, equals, endsWith, startsWith, matches, replaces, split, length, split,
	 subString -> string sequence ; subSequence -> CharSequence, toCharArray, toString, String.valueOf, trim

Task :  sort a string array using compareTo

24/07/24

regex, string pool, string builder & buffer, constructors

Regex -> Regular Expression

	. create gmail/email as i/p -> @gmail.com
	. pattern -> capCase, small case, spcl charc, some numbers, min length
		[A-Z], [a-z], [0-9], for not equal to ^ (cap)
		[aA0-zZ9]{3,5}@ -> combined, range
		\d -> decimal
		\D -> non-decimal
		\w -> like combined (decimal & non-deecimal)
		\W -> alpha-numeric
		. -> \w + \W
		.* -> repeatition
		.+ -> match anything

1. define a string pattern
2. compile the string to a regex
3. give i/p
4. match i/p & regex


String -> immutable class
String Builder & String Buffer -> mutable classes

string pool -> Java heap memory storage
	-> .equals checks only value of strings
	-> == checks reference/address/memory of strings

Constructor :
	to initialize the objects
	when you create an object of class, that class's constructor will be called -> default
	parameterized/argumented constructor -> when you send parameters
		-> pass any number of parameters
		-> this keyword

25/07/24:

Oops - Object Oriented Programming
	DRY, Don't Repeat Yourself principle -> reduce repetition of code -> boiler plate code

Encapsulation -> hiding sensitive data from users
	-> variables/methods/attributes will be defined as private
	-> public get and set methods to access and update the private variables

Inheritance(is-a relationship) : getting methods, variables from one class to other class
 	-> subclass (child class) :: the class inherits from another class
 	-> superclass (parent class) :: class which is being inherited
 	keyword -> extends
 	-> multiple inheritance -> one sub class trying to extend more than one super class
 		-> no, java doesn't support multiple inheritance
 			- Diamond problem
 			- complexity.. it should be simple and readable
 	-> can't inherit from a final class
 	Immutable -> other class can't modify attributes, methods etc in a class.
 		-> final keyword at class level -> no other class can extend this immutable class
 		-> declare variables as private and final, only you provide getters	and no setters are declared, provides constructor to initialize the variables
 		***** Once the object is initialized, it can't be modified!	******
	super keyword -> superclass(parent objects)
		-> calls constructor/methods/variables of parent class without creation of object to a parent class
	types : single, multi level, hierarchical, hybrid	

26/07/24 :

	SUPER keyword example -> Person & Employee

Polymorphism
	-> exists in many forms & it occurs when we have many classes that are related to each other by inheritance --> you can do a single action in multiple ways
		. compiletime polymorphism -> method overloading
		. run time polymorphism -> method overriding
	Method overriding -> during run time, jvm determines which method to call
		. from parent, you can create an object of sub class
		. can't override a static method
	@Override -> indicates that a method in a subclass is intended to override a method in parent class
		. if method is not present in parent, but in child if you put @Override it gives you compilation error
		. applicable only on methods not on variables/constructors
		. checks name of parent method and number & type of parameters.. to match with child class
		. improves readability
	Method Overloading -> during compile time, jvm determines which method to call
		. change input parameters data-type (instead of int, double)
		. change number of arguments passed	(instead of 2 int args, 3 int args)
			ambiguity -> if jvm can't determine the type 
				(int, double as i/p params for MethodA & double, int as i/p params for MethodB)
			
29/07/24

Abstraction	-> Data abstraction is called hiding the implementation/logic and showing the essential details
		1. using abstract class -> abstract keyword on classes/methods
			can have both abstract & non-abstract methods
			. class -> restricted class & can't be used to create objects (to use this, we have to inherit this class from another class)
			. method -> can be used only in abstract class and it doesn't have a body. The body will be provided its subclass(inherited class/child classs)
			. abstract is not available at variable level
		2. using interface
			-> completely follows abstract class but, related methods will have empty bodies
			-> implements keyword (child implements methods of parent)
			-> 100% abstraction can be achieved by interface because it doesn't show any logic in normal methods as well (not only abstract class)
			->	by default all methods in an interface are abstract and public.
			-> by default, a variable in an interface is static and final
			->	you can implement multiple interfaces

********* extends -> class level & implements -> interface level ************	
Multi level inheritance is not possible but multiple inhertiance using interface is possible

Enums : enumeration/enumerator

	-> group of constants, can't be changed just like final variables, enum(keyword) is a spcl class
	-> All constants are by default public, static, final

30/07/24 :

Association -> one-to-one, one-to-many, many-to-one, many-to-many relationships/mapping

Aggregation -> has-a relationship	
			bike(child) can exist independently, Vehicle as a parent can't exist independently

Composition : part-of (house and room, house is destroyed -> room will also be destroyed)		

Task : try to get practical example of Association, Aggregation & Composition

Exception handling : Exception hierarchy

technically, throw an exception -> when you expect some error in the program
	can't have multiple try blocks but can have multiple catch blocks -> in single try catch
	finally -> even if try/catch executes or not, this gets executed
	throw(line level) vs throws(method level) -> error handling 
Inbuilt Exception:
	checked vs unchecked -> 
		checked -> exceptions should be handled by user, don't extend runtimeexception
			FileNotFoundException
			throws -> at method level, the method which calls the throws method expects to handle exception either by writing try-catch block or throws exception
				-> suggested to use try-catch
		unchecked -> exceptions jvm handles, these extend runtimeexception
			ArithmeticException

Custom Exception/User-defined exception : we create our own exception
	1. extends exception
	2. calling Parent's constructor from child(user defined exp class) constructor

Collections : framework of Java, which stores/manipulates group of objects.. Collection means a single unit of objects
	-> Book/Coin Collection
	-> it provides interfaces(List, Set, Queue, Dequeue, Map) & classes to perform data operations

Hierarchy : 
Iterable (interface) -> Collection(Interface)
				Under collec -> List (interface) : linkedlist, arraylist..
							-> Queue (interface) -> Dequeue(interface)
							-> Set(interface) -> Sorted set(interface)
							-> Map (interface)
							-> stack
List 

	ArrayList
	-> array vs arrayList : 
		. create an arrayList
		. add elements
		. allows duplicates
		. read using for each loop
		. convert array to list and list to array
		. follows insertion order
		. Collections.sort(nameOfList)	
		. size of arraylist
		. contains -> search an object in an arrayList	
		. remove(index number)	
		. clear / removeAll 
		. add object at particular index position	
		. allows null elements

	Linked List
		. creation
		. adding elements
		. print elements in list using iterator

  //loose coupling & tight coupling
  hash & toString.

  	HashSet -> follows hashing mechanism	
  		. creating & adding elements
  		. allows null values
  		. unique elements, no duplicates
  		. no insertion order, based on hash of objects it inserts & displays the values
  		. removeIf, remove, removeAll
  	LinkedHashSet 
  		. no duplicates allowed
  		. insertion order	
  	TreeSet	
  		. ascending order
  		. no duplicates
  		. no null values allowed
  		. uses comparable, only the comparable objects are allowed
Queue & Priority Queue :	
		. FIFO -> First In First Out
		. create & adding elements to queue
		. read queue
		. stores in ascending order, allows duplicates
		. doesn't allow null
		. pull, element, remove, add, peek

Deque & Array Deque : Double ended queue
		. LIFO -> Last In First Out	 & FIFO -> First In First Out
		. we can add/remove elements from both sides
		. insertion order
		. null values not allowed
		. duplicates are allowed
		. pollFirst, pollLast, removeFirst, removeLast, addFirst, addLast

Stack :
		. LIFO -> Last In First Out		
		. push & pop, top
		. insertion order
		. duplicates & null values are allowed
		. remove, removeAt, add, addAt etc

Map : stores elements on form of key, value pairs called entries.

put, remove, keySet, entrySet, get(key) = value, map.values(), contains, isEmpty, size, replace

	hashMap: internal working of a hashmap

	. keys and values pair
	. no order, based on hashing it gives result
	. duplicates keys are not allowed, duplicate values can be allowed
	. you can update value while creation itself
	. allows null key and null values

	linkedHashMap -> Map + hashmap : allows null key and null values, follows insertion order

	TreeMap -> Map + sorted map : doesn't allow any null keys and null values.

02/08/24 :

toString, hashcode and equals

	toString -> every obj inherits this method through Object.java
	returns string rep of an object
	returns hash of the object

	hashCode -> memory of object

	equals -> override hash and equals

Multithreading :

thread -> extending thread & implementing Runnable/Callable

thread life cycle -> new, run, -> either wait/sleep or finish execution	

practical examples on threads
	if threads wait for each other -> synchronous communication
	if threads don't wait & run parallely -> asynchronous communication

Thread.sleep, wait, Thread.notifyAll, see other thread methods like join, priorities(1-10, 10 being the highest), yield, stop etc
synchronized keyword -> to make sure our threads run synchronously, dead lock scenario
s

Java 8 -> advanced Java :

	Lambda Expressions,
	Method References,
	Functional Interfaces,
	Stream API, 
	default methods,
	Optional.class,
	forEach,
	Collectors Class
	Date & Time changes

Functional Interface(FI) :
	Single Abstract Method (SAM)
	@FunctionalInterface -> extends other interface only if it has a single abstract method
		a FI can extend non-FI as well
		a FI can extend other FI
	(Bi)Consumer, (Bi)Predicate, (Bi)Function, Supplier	

05/08/24 :

Lambda Expressions : symbol ->
			To write clear anonymous functions on a SAM interfaces, we use lambda
			no need to write return keyword if you have single line of implementation, for multiple lines we have to use a return keyword in lambda.
			forEach -> lambda

Streams API : on any collection, to process data we use streams API
			-> forEach & filter on a stream

Types of FI :

Predicate  : checks conditions just like your if condition, to filter values based on condition
	-> boolean test method
	-> negate
	-> test
Function: takes and i/p and gives some o/p, to map/transform data input to out put	
	-> apply
	-> define data types in function
Consumer : accepts parameter and doesn't return anything.. printing, saving, processing data without expecting o/p
	-> accept
Supplier : no i/p only o/p, generate values
	-> get
UnaryOperator -> o/p and i/p type should be same
Bi -> two i/ps	

IntPredicate, DoubleSupplier etc ->  you can define i/p & o/p for those predefined datatypes.

06/08/24 :

 -> Arrays.asList(define values here), you can't perform add.. unmodifiable list
 -> .collect(Collectors.toList()), toList();
 -> map(function)
 -> Collections.reverseOrder, sort collections
 -> min value, max value
 -> Optional class -> if you are not sure if the result is present or not.
 	-> get, comparator, isPresent, isEmpty, orElse

Streams.reduce -> try to read about this

Method References : you can replace your lambda with method references, applicable on FI only
	1. reference to a static method
	2. ref. to constructor
	3. ref. to an instance/non-static method 

    Replacement of lambda -> use method reference

Practical examples for all above

Callable -> similar to Runnable.. Callable returns result & throws a checked exception if it couldnot find the result.
Future -> async computation's result
    -> single task execution & blocking (block result and proceed) 
        Ex : fetching data from remote server

07/08/2024 :

    Completable Future  -> Future + Completion Stage 
     Completable Future -> implementation of future with some additional asynch method computations.
     Completion Stage -> responsible for asynch communication
        ->nonblocking, chaining & composition(asynch data processing pipeline)

Private methods in interface
    -> as part of Java 8, we have default & static keywords/methods in an interface, by default all methods are public

    -> private methods can't be abstract
    -> only in other methods of that particular interface, you can call private methods
    -> pvt static method can be used inside other static methods 
    -> pvt non-static methods can be used in any other static/default methods in interface

-> here common methods in two interfaces problem can be overcomed by calling the super method using interface name
    
    @Override
    public void method2() {
        CustomInterface.super.method2();
    }

Var keyword -> common datatype for all values, JC(java compiler) will determine the type of data based on value of data.

    var age = 7.02d;

    var name = "John";

    var map =new HashMap<String, Integer>(); // applicable to all collections

   Drawbacks :
   
    int x ;  x = 10;

   1. var y ; y = 15; -> compilation error
   2. can't use this as a global variable, method parameter, return type
   3. can't assign null as value


Text blocks from Java 10-> replaces \n with """ quotes. 

Records from Java 14 -> parameterized constructor, getter, toString, hash and equals
    By default these records are immutable

entity or POJO -> Plain Old Java Object/ DTO -> Data Transfer Object    

08/08/24:

Collectors API & Immutable Collections : from Java 9

    -> Collections.unmodifyableList -> allow null values
        can modify your original collection
    -> List.of/Map.of/Map.ofEntries --> immutable collections -> no null values allowed
        can't modify, only read/search

-> Stream.of/Stream.ofNullable/takeWhile/dropWhile

Switch expressions -> Java 13 & 14, we have yield..

    -> yield, some logic before yield
    -> lambda replacement of yield & logic and multiple statements with lambda & yield

Date & Time API : LocalDate, LocalTime, LocalDateTime, DateTimeFormatter
More examples of Patterns -> HH, MM, ss, yyyy, dd, mm etc
    https://howtodoinjava.com/java/date-time/java8-datetimeformatter-example/

    ZonedDateTime
    LocalDateTime conversions
    ChronoUnit
    Period -> deals with date
    Duration -> deals with time

    Negative : start < end
    Zero : start = end
    Positive : start > end

    Temporal Adjusters & Instant -> read about these

09/08/24 :

file handling

    check if file exists or not using fileName
    if file doesn't exist, we created a file, read contents from file, updated contents, replaced contents
    If file name already exists and if we create another file using same name in same directory it gives run time exception.

 try with resources
 AutoCloseable

sealed and non-sealed

    sealed -> can be extened only by sub classes that are defined by permits keyword
    non-sealed -> a subclass of a sealed class which is open for extension
    final -> can't extend by any other class

CodeKata & WebKata -> how to solve  

12/08/24 :  

Types of Classes :

    static, final, inner class, pojo class, singleton class, abstract class, concrete class etc

generics : parameterized types, to allow any type of object
T - type
E - element
K - key
N - number
V - value

use cases of generics : code resue and type safety

Comparable and comparator

read about garbage collection, finalize in GC and memory allocation in jvm

13/08/24:

HTML -> Hyper Text Markup Language

VS code installation, setup, download extensions, creating files/folders.

html tags/elements -> for formatting and displaying content on a web page
    -> opening tag(<button>), content, closing tag(<button/>)
    -> unclosed tags(<br content/>, <hr>)

html -> root for html page
head -> info about document just like import in java
body -> content you show in your website

attributes in your opening tag-> lang="en"    

<title> name for your web page

Header tags :

<h1 to h6 id="heading"> content here <h1 to h6/>
<p> -> paragraph
<hr> -> horizontal line
<pre> -> display content with spaces and line changes

Inline CSS -> inside the start tag

Styles -> font-family,Font-size -> 100% -> 16px
Colors -> text clr, bg clr, rgb(red, green, blue), hexadecimal(hex), hsl and hsla(hue, saturation, lightness, alpha)
    hue -> 0 to 360
    sat, lightness -> 0 to 100%
    alpha -> 0.0 to 1.0

Anchor tag : Links/Buttons etc

    <a href="https://facebook.com">Visit our official facebookpage</a> <br />
    <a href="mailto:test@gmail.com">Contact us here</a> <br />
    <a href="mailto:test@gmail.com" title="Mail Us">Contact through mail</a>
    <!-- tool tip --><br />
    <a href="https://facebook.com" target="_blank">Visit in new tab</a>

img -> Image tag : absolute url(external links to images) or relative url(inside your folder)

<img src="image path" alt="alternate text">    
<img src="images/bridge.jpg" alt="A bridge image" style="width: 500px; height: 600px;">
<img src="images/mountains.jpg" width="500" height="600">
style -> float:right -> aligning your image
add link to an image -> inside anchor tag you will place your image
background image : url() and ctrl this image

internal css -> <style> tag

14/08/24 :

picture -> based on screen size we can change images

Formatting :
<b>, <i>, <strong>, <em>, <mark>, <del>, <sub>, <sup>, <ins>

Quotation and Citing :

<blockquote cite="yourwebsite">
<address>
<abbr> -> abbrevations

favicons : logo of our website near title
 <head> 
    <link rel="icon" type="image/x-icon" href="images/bridge.jpg">
  </head>

Inline CSS, Internal CSS, External CSS

<link rel="stylesheet" href="styles.css">  --> external CSS

Border : space around html element
padding : space btwn text and border
margin : space around border

Tables :
<table>
<th>
<tr>
<td>
horizontal headers, vertical headers
colspan
rowspan
height, width, table properties
caption -> table name

Lists :

unordered -> ul -> disc, circle, square, none, nested list
ordered -> ol -> type = a, A, 1, i, I and start = number/letter, nested list
descriptive -> dl -> dd, dt

developed a nav bar from ul, we used property called float

16/08/24 :

div : container and for styling page elements, block-level code
    float, div class, display :inline-block, flex, grid
span : line level/in-line container

block line -> p , div etc
inline -> span, a etc

when you use class in any tag, style with .className to style
when you use id in any tag, style #idName to style

Generally we maintain single id in a html page and multiple classes


Layouts : float, flex, grid

semantic tags : header, footer, nav, section, article, aside, details, summmary, form, table etc

header -> define a header for doc
nav -> navigation links
footer -> meta information

Forms : takes input from user and sends to server or backend for processing
    label -> for, value -> placeholder
    input -> diff types of i/p, id to map with label, value -> placeholder
    attributes -> action, target, method (get by default and post -> secured), autocomplete
    novalidate

 19/08/24:
 
 Forms : 
    elements : select, option, selected, size, multiple
    <textarea name="message" rows="10" cols="30">Please leave message here</textarea> <br>
    <textarea name="message" style="width: 200px; height: 600px;">Please leave message here</textarea> <br>
    legend, fieldset, input as list and datalist with options
    alert
    input types : date, datetime, color etc
    i/p restrictions : min, max, size, pattern, placeholder, required
    readonly, disabled, multiple

box model -> design and layout
    content, padding, border, margin

Selectors : # -> id
            . -> class
            simple, universal (*), grouping selector..
   
Dropdowns : position, box-shadow, display, hover, zindex, right, left,cursor: pointer;

21/08/24 : 

display : inline, block, inline-block
display : flex, justify-content, flex-direction, flex-wrap, flex-flow -> wrap + direction, 
grid and its properties

CSS positions
    relative   
    absolute
    static
    fixed 
    sticky

Media Queries : allow user to apply styles based on size of device : responsive layout

22/08/24 :

simple portfolio using html, css

Practical examples on
RWD -> responsive web design

mobile first approach -> based on screen size, @media..

Tailwind css, bootstrap -> layout, grid, container, breakpoints(6 by default -> sm, md, xs, lg, xl, xxl), colors etc

23/08/24  :

sticky in css positioning

CSS overflow :
    visible -> by default
    hidden -> extra content will be hidden
    scroll -> adds a scroll bar along y-axis
    auto -> if content fits in a box, it will be visible or if content overflows the box it takes scroll

Bootstrap :
typography
tables
alerts
buttons
progressbars
spinner
pagination
list
dropdown
cards
nav bar
modal
carousel
scrollspy
flex

Deploy thorough git hub -> Jaya Surya has shown the demo


*************GITHUB****************


Git : github, gitlab, bitbucket.. -> distributed version control system

    1. signup
    2. create a repository
    3. add files/folders

Bring from your github account to your local machine :  

git clone https://github.com/kavyamaremalla/JFS10WD.git

Add files to github account : Committing to git

    local ->  staging(temporary storage of files to be committed)  -> github account

Install git in local machine -> git bash and git gui

git status -> file status 
git add <fileName which you want to send to github account> or for all files -> git add .
git commit -m "Your Message Here : Reason why you are committing" -> local to staging
git push -> from staging to github account

git pull -> changes from github  made by others to be in your local machine

    git init
    branching -> add branch, delete, pushing a branch
    upstream (local to remote), downstream (remote to local)
    rebase -> bring changes from remote during conflicts, resolve conflicts and push
    git fetch vs git pull -> git fetch + git merge
    pull request/merge request
    stash -> git stash, list, pop, apply
    gitignore


******************* Javascript ********************  27/08/24
    - dynamic pages creation

  html -> define the content of web pages
  css -> layout of the webpages
  js -> program the behaviour of web pages

<script> -> you will write js code, can place it in either head or body
or directly in browser's console -> you can try js code

How to display :

console.log("Hi, from browser console !") -> system.out.println in java  
document.getElementById("demo").innerHTML = 5 + 6;
document.write("Hi")
window.alert('This takes you to JS display')

vscode-runner -> extension, install to run js code

dom -> document object model
bom -> browser object model i.e., window..

Variables :
    var : you can redefine/replace your variables --> old js version --> drawback.. hoisting
    let : can not redefine (compilation error) but can replace
    const can not redefine (compilation error), can't replace -> run time error

    typeof variable -> to get data type : let shape = "square";
                                          console.log(typeof shape);

                         number, string, undefined, boolean, object
                                          
    NaN -> not a number

 deploy site through netlify -> demo by Dhanush
 
JS Objects :  Json representation of data : Java Script Object Notation
json object
object in an object
Functions : named functions, functions in an object


Array, String

    Data Operations 
        -> casting
        -> date, new operator
    == -> check only value
    === -> check value + check type of variable

    String Operations : 
     -> string methods
     -> interpolation ->. ${} -> read variables and expressions, use backticks
     -> string search operations

Arrays :

    which holds more than one value
    can store multiple datatypes of values
    sort, reverse, splice, push, pop, shift, unshift, join, concat, flat, slice,copywithin
    foreach ->uses arrow/anonymous function

Javascript Implementation(Operators, conditional statements, Switch case)   -> done

loops -> for, for in, for of, while, do-while 
filter, map, reduce -> on an array

sets, in javascript

Maps -> creation : new Map
        -> through array
        -> through set

Exception Handling -> 
    try, catch, finally, throw

Error types ->
reference error, type error, URI error, Range error, EvalError(old js), syntax error(new js)

this key word :
this.fName, this.lName
call, this. -> in html
apply, bind 


04/09/24:

Selecting and Manipulating Elements
document.queryselector & document.queryselectorAll
Alert box, confirm box, Prompt box
What's the DOM and DOM Manipulation
Append & Appendchild
get element by Class, tagname & ID

Events : click, alert, keypress etc

Array & Object Destructure

    arrays into disctinct variables
    object properties into distinct variables

Arrow Function, =>
Rest Operator, : in functions
Spread Operator : in arrays

05/09/24 :

Constructors

Getter & Setter

class, Inheritence, extends..

JSON Parse, String to array, Json Stringify

Prototype

Closures : 

Call Back

Introduction to Asynchronous programming

setTimeOut

06/09/24 :

File Reading using normal try-catch
Overview of  Promises, settime out in promises as well
asynch -> make sure funtion returns a promises
await -> function waits for the promises
Fetch ->
Dummy API : https://reqres.in/

Axios -> https://www.npmjs.com/package/axios

09/09/24 : *************Databases**************

DB : organized collection of data -> DBMS

Tables -> rows and columns : Structured Query Language (SQL)
    - MySQL, MS SQL, Postgres, Oracle etc

NoSQL : Collections, Documents, JSON representation
    - MongoDB, Maria DB, Ibm DB2, Cassandra etc

Types of DBS : relational, distributed, cloud, hierarchal etc    

Data : create, modify, read, delete -> DBMS (communicates btwn users and db)

.sql extension-> to save any SQL file

Installation of SQL WorkBench

Commands

create database DATABASENAME -> to create a db
drop database DATABASENAME -> to delete a db
show databases -> will show all existing dbs

create table
take backup of a table
creating table from existing table
drop table
ALTER ->column level add, modify, delete, add a column at particular place, change column name, change data type of column

Data ->

    create data -> insert
        Insert into college.student(RollNumber, FirstName, Surname, Email_Address, isCertified)
        Values (3, "Peter", "Parker", "peter@gmail.com", false);

    read data -> select
alias  Select count(*) as Certified_Students_Count from student where isCertified = 1;

    update data -> update student set email_address = 'ajsgd@gmail.com', Surname = "Potter" where RollNumber = 1

    delete data
    Delete from student where RollNumber is null

truncate table ->table structure is preserved, all the data will be deleted

DDL -> Data Definition Language : table level
    create, alter, truncate, drop table
DML -> Data Manipulation Language : data level
    insert, update, delete, select

Constraints

Not null,
default,
unique,
check      
Auto Increment

Primary key

Foreign key


create table personDetails(
   PersonId int Not Null unique auto_increment,
         firstname varchar(255),
         age int Default 18,
         CHECK (Age >= 18) ,
         Primary Key(PersonId)
         ) 

Foreign key :

create table orders(
        OrderId int not null auto_increment,
        OrderNumber int not null,
        PersonId int,
        Primary Key(OrderId),
        CONSTRAINT FK_PersonDetailsOrder foreign key(PersonId)
        references persondetails(PersonId)
        );
     
     Alter table Orders
     ADD foreign key(PersonId) references persondetails(PersonId)

Records in range
      select * from persondetails where age between 20 and 30;
     Not in range :
         select * from persondetails where age not between 20 and 30;

like Operator:
      select * from persondetails where age like '28';
      select * from persondetails where firstname like '%pet%';

distinct & count keywords:
       select count(distinct(firstname)) from persondetails;   

Extract :

select firstname, right(firstname, 1), left(firstname,3) as ExtractedString
from persondetails    

select firstname from persondetails
where right(firstname, 1) = 'r';

select firstname from persondetails
where substring(firstname, 3, 1) = 't'


Order by

select * from persondetails
order by age desc

select * from persondetails
order by age asc --> by default even if you don't mention asc

limit and offset

select * from persondetails 
-- where firstname = 'Peter'  This is how we comment in sql queries
order by age desc limit 4 offset 3;

select * from persondetails
order by age desc limit 4

Aggregate functions : min, max, avg, count, sum

Min and max, count

select min(age) as MinAge
from persondetails;

select max(age) as MaxAge
from persondetails;

Sum and Avg 

select avg(age) as AvgAge
from persondetails;

select sum(age) as SumAge
from persondetails;

group by

select count(distinct(firstname)), age
from persondetails
group by age;

select count(firstname), age
from persondetails
group by age;

Having clause : aggregare functions ., where can't be used

select count(distinct(firstname)), age
from persondetails
group by age
having count(PersonId) > 1
order by count(PersonId) asc;

IN : to bring multiple values in Where condition, you can also write a query

select * from orders
where PersonId in 
(select PersonId from persondetails);

Operators : >, <, >=, <=, = , !=, and, or

select * from persondetails where age <= 20 or age != 45 and firstname not in ('Peter', 'Jill');

SQL : select top(3) * from persondetails;


joins : inner, full/cross/cartesian/join, left, right


select pd.*, o.*
from persondetails pd
inner join orders o
on pd.PersonId = o.PersonId;

select pd.*, o.OrderId, o.OrderNumber, o.dateOfPurchase
from persondetails pd
inner join orders o
on pd.PersonId = o.PersonId
inner join person
on pd.PersonId = person.Id
where pd.PersonId > 1;


union & union all -> on two select queries

select * from persondetails where PersonId > 103
union 
select * from persondetails where PersonId < 50

index

create index idx_fName
on persondetails(firstname);

drop index idx_fName on persondetails

coalesce : select PersonId, coalesce(firstname, isMarried) as Name from persondetails;

11/09/24 : Read about transaction levels, ACID properties

TCL : Transaction query Language

    SET transaction isolation level serializable;
        Begin / Start Transaction;

    -- write any queries, insert query 
    Savepoint savepoint1;

    update query;

    Savepoint savepoint2;

    COMMIT;

    -- Rollback : insert --> rollback will be delete
    Rollback to savepoint1

DCL : Data Control Language -> Grant to give persmissions to user

Revoke to rollback permissions
    GRANT ALL PRIVILEGES ON database_name.* TO 'username@host';

    REVOKE ALL PRIVILEGES ON database_name.* FROM 'username@host';

SP
    -- 100 lines of code and you want to execute it many times : Stored Procedures
    -- save this 100lines of code as an SP, Call SP_NAME

JDBC : Java Database Connectivity

jar -> package -> classes -> functions/methods

maven

*******Mongo DB*****

NoSQL DB : 

databases -> dbs

tables -> Collections
rows and columns -> documents/records

Download 
    Server : https://www.mongodb.com/try/download/community
    Shell : https://www.mongodb.com/try/download/shell
 GUI: 
    Compass : https://www.mongodb.com/try/download/compass
    Robo mongo : https://robomongo.org/

show dbs
switch to db : use dbName -> uses db if already exists or creates one if no db exists
delete db ->  db.dropDatabase();

show collections
db.createCollection("home_loan") -> creates a collection in db
delete a collection : db.home_loan.drop();

Insert :

    one : db.loan.insertOne({name : "Home_Loan", tenure : 15, dateOfOpening : Date(), isDocumented : true})
    db.loan.insertMany([{name : "Home_Loan", tenure : 30, dateOfOpening : Date(), isDocumented : true}, {name : "Home_Loan", tenure : 25, dateOfOpening : Date(), isDocumented : false}])

Read : db.collectionName.operation
    
    db.loan.find() -> all documents
    db.loan.findOne() -> first document
    db.loan.find({tenure : 15}) -> where condition in bracket where tenure=15
    db.loan.find({tenure : 15, name : "Home_Loan"}) where tenure = 15 and name = home_loan

    db.loan.find({}, {tenure : 15}) //projection object
    db.loan.find({}, {tenure : 15, _id:0})
    db.loan.find({}, {tenure : 15, _id:1})
    db.loan.find({}, {tenure : 0, _id:1}) -> all details

12/09/24 :

Update : 
    db.loan.updateOne({isDocumented : false}, {$set:{tenure : 20}}) : modifies first matched record

    db.loan.updateMany({isDocumented : true}, {$set:{tenure : 20}}) : modifies all matched records

    db.loan.updateMany({isDocumented : true}, {$set:{tenure : 20, lastModifiedDate : Date()}}) : modifies all matched records and also adds a new field to existing doc

    db.loan.updateMany({tenure : 15}, {$set:{lastModifiedDate : Date()}}, {upsert : true}) : inserts records if there is no record, else modifies existing record

 Operators : https://www.mongodb.com/docs/manual/reference/operator/update/

    db.loan.updateMany({}, {$inc:{tenure : 5}})
rename, unset, currentDate

Array Operators :  https://www.mongodb.com/docs/manual/reference/operator/update-array/

     db.loan.updateMany({}, {$addToSet: {insurance : {$each : ["Axis", "HDFC", "ICICI"]}}})

     db.loan.updateMany({},{$push : {insurance : "Max"}})
     db.loan.updateMany({},{$pop : {insurance : -1}}) //removes 0th index
     db.loan.updateMany({},{$pop : {insurance : 1}}) //removes last index

     Adding/Updating with Map

      db.loan.updateMany({},{$set: {myMap: {key1 : "value1", key2 : "value2"}}})
      db.loan.insertOne({myMap: {key1 : "value1", key2 : "value2"}})

 Delete Operations :
 
     db.loan.deleteOne({}) //first record
     db.loan.deleteOne({name : 'Vehicle_Loan'}) //matching the name, deletes first matched
     db.loan.deleteMany({tenure:30}) // matching all records
     db.loan.deleteMany({})  //delete all objects

Index :

db.loan.createIndex({'productprice':1}) , 1 means asc order and -1 is desc order
 db.loan.getIndexes()

  db.loan.find({product_price : 911}).explain("executionStats") -> check totalDocsExamined before index creation and after index creation


  Comparison : https://www.mongodb.com/docs/manual/reference/operator/query-comparison/

  db.loan.find({product_price : {$ne : 690}})
  db.loan.find({product_price : {$eq : 690}})
  db.loan.find({product_price : {$lt : 690}})
  db.loan.find({product_price : {$lte : 690}})
  db.loan.find({product_price : {$gt : 690}})
  db.loan.find({product_price : {$gte : 690}})

  db.loan.find({marks : {$in:[82]}}) //array in
  db.loan.find({marks : {$nin:[82]}}) //not in array


Aggregrate Functions/Operators/Pipelines :

    var/const matchProdPrice = db.loan.aggregate([{$match:{product_price:{$eq:474}}}])
        matchProdPrice

     db.loan.aggregate([{$match:{product_price:{$gt:474}}}, {$count:"totalQuantity"}])
     ///stores count as totalQuantity and give you result

     db.loan.aggregate([{$limit : 3}]) //gives first 3

    db.loan.aggregate(([{$match: {product_price : {$gt: 70}}},{$group : {_id:"$product_material", totalPrice:{$sum: {$multiply:["$product_price", "$quantity"]}}}}, {$sort: {totalPrice: -1}}, {$limit:5}, {$project: {"_id":0}}]))
    
    or

    db.loan.aggregate(([{$match: {product_price : {$gt: 70}}},{$group : {_id:"$product_material", totalPrice:{$sum: {$multiply:["$product_price", 2]}}}}, {$sort: {totalPrice: 1}}, {$limit:5}]))   


    db.loan.aggregate([{$lookup:{from:"OtherCollection", localField:"_id", foreignField:"_id", as:"Details of the product"}}]) //joining other collection


const priceOperation = db.loan.find().map(function(e){return e.product_price * 2}).toArray();
priceOperation.length -> gives you length of array
for(const element of priceOperation){print ("Product Price double will be : " + element)}

Validation in mongoDb, validate your schema: https://www.mongodb.com/docs/compass/current/validation/

registering student -> age of student dob year > 2010, int.. mobile num is mandatory, address.. validation Level : warn or error..

    json/bson javascript/ binary java script

db.createCollection("student", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["name", "year", "mobileNumber"],
         properties: {
            name: {
               bsonType: "string",
               description: "Must be a string and this is a required field"
            },
            year: {
               bsonType: "int",
               minimum: 2015,
               maximum: 3000,
               description: "Must be an integer. This is the date of birth year and should be > 2014 and < 3000"
            },
            mobileNumber: {
               bsonType: "long"
            },
            address: {
               bsonType: "string"
            }
         }
      }
   }, validationAction:"error" / "warn"
})

Example :

 db.student.insertOne({age : 15, dateOfJoining : Date(), isCertified : true, mobileNumber : NumberLong("9876454"), year :  2016})

 13/09/24 :

 Web Application Architecture :

    single-tier : MS Word -> ui, business logic, data storage -> single layer.. no separate client or server
    two-tier : client(user interface) --> interacts with server(logic) and gets a response back
       client : web browser , server : db

Monolithic vs Microservice Architecture :

Monolithic:   a single application bundled with many services
                    -> search of products, payment, view orders etc : single service
                    -> tight coupling

Microservices : divided into n number of services/chunks
                    -> search of products, payment, view orders etc :: separate services
                    -> loose coupling

Intro to Rest : Representation State Transfer

Rest, Soap, Graph QL etc

    architectural style to design your n/w apps
Principles :

    Stateless : every req from client to server should contain all req info
    Cacheable : 24hrs (hit API -> gives get response)

Communication btwn client and server :

Client Requests ->

    GET ap/users/1 HTTP1.1
    host : example.com

Server Response ->
   
   HTTP/1.1 200 Ok
   content-Type : application/json

   {
    "id" :1,
    "name" : "john"
   } // POJO,  DTO, Entity

API : Application Program Interface

    GET
    POST
    PUT
    Patch
    DELETE

Java Containers & Servlet :

JAVA EE -> JSP, Servlets ( Lifecycle of Servlet --- >
        init () -> initialize servlet, 
        service () -> doGet, doPost, 
        destroy () -> cleans up the servlet)

Servlet Container : something which interacts with your servlets
    
    -> manage lifecycle
    -> map client req to appropriate servlet
    -> handles security, multi threading, session management

   1. Apache Tomcat
   2. Jetty Server 

Software Design Patterns :
    Some common solutions to software design problems
    Gang of Four
    23 design patterns

Spring :: Framework

  -> less code
  -> all configuration you can write in a class/file
  -> boiler plate code : reduce this boiler plate code/config


IOC : Inversion of Control : bean/object creation/destruction responsibility is on Spring
DI : Dependency Injection : If there's any dependency from other classes, it shall be injected into your resepective beans

Bean : objects maintained by spring
            : by default, scope of beans are singleton.. you have prototype

DI :
    constructor injection
    setter injection
    Class

    Singleton -> same hash for multiple objects, destroy method will be called when context is closed destroy 
    prototype -> different hash, different objects,destroy method won't be called

Annotations of Spring :

    created a config class
    read all config from the SportsConfig
    @Component -> bean definition and giving name
    @Scope & @Scope(value = BeanDefinition.SCOPE_PROTOTYPE)
    @Value("${email}") -> to read properties from app.properties/app.yml
    @Autowired -> Injecting your dependencies
                : constructor -> mandatory fields
                : setter -> optional fields
                : field/class level
    @Qualifier -> to give priority to beans
    @Bean -> to use/call third-party libraries (read access)

Spring : 

    spring mvc : model, view, controller
        configuration : more
        server : external tomcat server

    spring boot : 
        configuration : less
        server : internal server -> by default tomcat server, you can change the default server
        for microservice, this is best to use


Spring  : https://spring.io/

API Request -> (filters, mule soft, ping federate, api gateway, sandbox etc) -> controller -> service -> repository.
gives response back from repo -> service -> controller

    controller : write request parameters, type of request
    service : business logic
    repository/DAO : all db calls.

https://start.spring.io/ -> to build spring projects

Compatability matrix

    java -> boot/cloud/spring framework
    Always pick latest non-vulnerable version

Lombok -> give more inbuilt configurations for your pojo items    

https://projectlombok.org/download

lombok in eclipse : https://stackoverflow.com/questions/22310414/how-to-configure-lombok-in-eclipse-luna

checkstyle -> used to define some rules to your project

@Controller -> to rep as a controller class component

@RestController -> @Controller + @ResponseBody

http://localhost:8080/call-api

    call-api --> end-point
    localhost -> domain/host
    8080 -> port
    localhost:8080 -> base uri/url
    http/https -> protocol


 Http Status Codes : to know how your request work & response outcome

    1xx -> informational
    2xx -> API Status/Issues
    3xx -> Additional action from client
    4xx -> client issues
    5xx -> server issues
 
Built a simple API :

@GetMapping("call-api")
    public String firstAPI(){
        return "Hello, Happy Coding! Please find next steps!";
    }


getting All Students

getting random student

getting a student by rollNumber -> 
    @PathVariable -> http://localhost:8080/getStudent/{rollNum} --> path parameter/variables
    @RequestParam -> http://localhost:8080/getStudent?{rollNum}&{fullName} --> query parameters
        Eg : http://localhost:8080/getStudentByQuery?rollNumber=4&fullName=Jill

Postman tool : Tool to work with APIs : https://www.postman.com/downloads/

Create student : @PostMapping

@RequestBody -> to read student details from request -> @DeleteMapping, 
UpdateMapping -> @PutMapping -> replaces entire object, you will send whole request body
                 @PatchMapping -> only particular field, we send the field which is to be updated.

Swagger : API Documentation & Design Tool : https://swagger.io/docs/

PayPal : https://developer.paypal.com/api/rest

    Swagger 2 -> Enable configuration, write more configuration
    Swagger 3 -> add a mvn dependency, custom configuration at ctrlr level, dto level,  swagger application level is optional.

  Swagger end-point to run locally :
  
    http://localhost:8080/swagger-ui/index.html
    http://localhost:8080/swagger-ui.html --> redirects to above url


 Configuring Swagger ->
    at Application level
    at Controller level
    at Schema level     


JDBC : db dependent, more control on queries
hibernate : independent of db, hibernate mapping, orm
JPA : Java Persistence API, hibernate is an implementation of JPA


@Entity -> mysql table
@Table(name = "persons") -> give table a name, not as a class name

@Id --> PK
@GeneratedValue(strategy = GenerationType.IDENTITY) --> Auto generating Pk

@Column(name="", nullable = false, unique = true)

Connecting to db, creating tables through java pojo, updating tables.
    hibernate.cfg.xml -> naming is important, we declare configurations here.


hibernate ORM : Object-Relation Mapping

Mappings :

        one to one mapping
        many to one mapping
        one to many mapping
        many to many mapping

Spring-Data-JPA :configured project for jpa: user-management, wrote a Post API
    task : create remaining APIs.        

spring mapping
validation,
exception handling


23/09/24 : 

Spring Boot DevTools : provides live reload if any change in code of the application.

    Generated a project through start.spring.io
    app.properties
    





Practice Questions :

1. You are given a list of lists containing integers. Create a stream to flatten the nested lists, remove duplicate integers, and then find the square root of each distinct value.


List<List<Integer>> nestedLists = Arrays.asList(
  Arrays.asList(1, 2, 3),
  Arrays.asList(3, 4, 5),
  Arrays.asList(5, 6, 7),
  Arrays.asList(7, 8, 9)
);

nestedLists.stream().flatMap(List :: stream).distinct().map(Math::sqrt).forEach(System.Out::Println)


2. Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104