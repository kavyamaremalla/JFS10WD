1. tasks from guvi end -> 10-15 tasks, module assessmemt (skill enhancement)
2. mini project, capstone project 
3. assessment

Java Full Stack --> 

backend & front end -> Java
data base -> you store your data (personal & confidential)

Intro to Java. -> web,mobile,desktop apps development,
platform independent -> runs on any OS
OOPS -> follows object oriented programming lang

JVM , JDK, JRE ->

JVM -> load, verfiy, execute code & provide runtime environment
JRE -> implementation of JVM.. libraries + files -> Sun Microsystems
JDK -> JRE + some other tools like javac, java etc..
	Open JDK vs Oracle/Amazon Corretto JDK..
	Javadoc, jar, javac, load java it has tools

JEP -> Java Enhancement Proposal..
	irregular -> Java 6 : 2007, Java 7 : 2011, Java 8 : 2014, Java 9 : 2017.. Java 22 : 2024
	LTS -> java 8, 11, 17, 21 (current lts version)
	every six months i.e., march & september.. minor versions non-lts versions..
	march 12 & sept had java 13.. 12 will be supported until 13 release..

backward compatability ->

Installation of Java & IDE.

	Install JDK -> Amazon Corretto, Oracle or any other provider.. Go with Java 11 or Java 17
		java -version in command prompt
	check environment & system variable -> path to your java.. add JAVA_HOME, also add in path if not present


task : run a java file in your local machine without using an IDE & with using IDE.

Install IDE -> eclipse or sts or IntelliJ or any other tool you wish..

Java Basics :

	class -> blueprint
	object -> car ==> attributes : weight, color., methods/functionx -> drive, brakes
 	
 	Variables : to store data values

 	 //local, global/instance, static

    int price = 700; //instance or global variable

    static int m = 100; // static variable -> memory allocated once when class is loaded in memory

    public static void main(String[] args) {

        Car car = new Car();

        car.price =90; //object-level or instance variable

        int x = 80; //local variable

//        price = 90;
         m = 90;
    }

   public void add(){
        int sum = 100; //local variable
        m = 999;
    }

 	Primitive Data types : byte, short, int, long, float, double, boolean, char
 		-> predefined, immutable, stored in stack memory, store single values

 	Non-primitive	-> stores multiple values, user-defined,  mutable, stored in heap memory
 		String, Array, Object etc

 	Wrapper Classes -> collection, generics, autoboxing -> primitive to wrapper, unboxing is vice versa
 		Integer, Double, Long, Float etc built on primitive data types
 			

 		String -> text in ->  "double quotes"  -> "100 Marks"
 		int -> whole numbers
 		float -> 110.09f
 		char -> character -> 'a' -> one alphabet in single quote
 		boolean -> true/false
 		double val = 190.09; -> 8 bytes of memory
        float flVal = 190.09f; -> 4bytes of memory
        long longVal = 198081893786387457L;; -> 8 bytes of memory
        byte byteVal = 0; -> -128 to 127
        short  shortVal = 100;

        Non-primitive Datatypes: String


 	compile time & run time -> compile == while writing the code, run-time -> when you run/execute the code.


 Type Casting -> converting from one data type to other data type
 
 Example :  Widening & Narrow Casting


        
    //byte < short < char < int < long < float < double

    widening:

        int myInt = 8;
        double myDoubValue = myInt; //Automatic casting

//        System.out.println(myInt);
//        System.out.println(myDoubValue);

	narrow

        double db1 = 9.67d;
        int intVal = (int) db1; // manual cast

        System.out.println(db1);
        System.out.println(intVal);

Operators : Arithmetic, assignment, comparison, logical, bitwise

	 int result = 100 + 700;
        
        String output = "Hi " + "Welcome"; -> concatenation/concatinate

        System.out.println(result);
        System.out.println(output);

     Postfix :
     
      int x = 1, j;
       j = x++;

        System.out.println(j + " " + x );


        logical operators:

      int age = 17;

        System.out.println(age > 18 && age < 100);//false
        System.out.println(age > 18 || age < 100);//true
        System.out.println(!(age > 18 || age < 100));//false   

        Scanner :

         Scanner scanner = new Scanner(System.in);

        System.out.println("Please enter your age ");

        int age = scanner.nextInt();
        

        System.out.println(age > 18 && age < 100);//false
        System.out.println(age > 18 || age < 100);//true
        System.out.println(!(age > 18 || age < 100));//false

Conditional/Control statements: after this terenary operator

Decision -> if/switch -> if, if-else, if & else if, nested if
loop -> while, do while, for, for-each
jump -> break, continue, return

18/07/24 : 

Debugging a class -> scanner and nested-if example.

Naming conventions :

	class -> start with capital letter -> upper camel case 
		SwitchCaseExample
	variable/function/ method name -> starts with small letter
		int age;
		public void sum(){}
	checking account balance method-> checkAccountBalance -> lower camel case
	car -> applyBrakesForCar

Switch :

import java.util.Scanner;

public class SwitchCaseExample {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter day in a week ");
//        char dayOfWeek = scanner.next().charAt(0);

        String dayOfWeek = scanner.next();

        switch (dayOfWeek){
            case "Monday" :
                System.out.println("Day 1");
                break;
            case "Tuesday" :
                add();
                System.out.println("Day 2");
                break;
            case "Wednesday" :
                System.out.println("Day 3");
                break; //keyword
            default:
                System.out.println("Please check your input");
        }


    }

    public static void add(){
        System.out.println("Inside add");
    }
}

For loop :

 System.out.println("Started for loop execution");

        for(int i = 5; i <10; i++){
            System.out.println(i);
        }

        System.out.println("For loop ended");

Nested-for :

    for(int i = 1; i <= 3; i++){ // 1, 2, 3
            for (int j = 1; j <= 3 ; j++) {
                System.out.println(i + " " + j); // 1 1 , 2, 3:::: 2 1 2 3 :::  3, 1, 2, 3
            }// ends i loop
        } // ends j loop        

 int i =3;

        System.out.println(i);
        System.out.println(i++);
        System.out.println(i);
        System.out.println(++i);


for-each/enhanced-for loop : to iterate over collections  


        int arr[] = {1,2,51,62,86,98};

        for(int i : arr){
            System.out.println(i);
        } 

int[] arrayOfNumbers = {1,2,51,62,86,98};

        for(int integerValue : arrayOfNumbers){
            System.out.println(integerValue);
        }


        System.out.println("*******************************************");

        for (int i=0; i < arrayOfNumbers.length ; i++){
            System.out.println(arrayOfNumbers[i]);
        }
 infinite for loop -> 
 
     for( ;  ; ){

            System.out.println("Inside for loop");
        }       

 while loop :
 
  int i = 1;

        while (i< 10){
            System.out.println(i);
            ++i;
        }

do-while loop:

 int i = 1;
       
       do{
           System.out.println(i);
           i++;
       }while (i<=10);


break, return & continue :

  public static void main(String[] args) {
        for (int i = 0; i <=10 ; i++) {
            if(i==5){
//                return;
//                continue;
                break;
            }
            System.out.println(i);
        }

        calculateEngineCC(20);
    }

    public static int calculateEngineCC(int weight){
        int capacity = weight * 1000;
        System.out.println(capacity);
        return capacity;
    }       


Ternary Operator :

 String result = age >= 18 ? "Eligible to vote"  : "Please check next time, not-eligible" ;

 Math Operations

 Literals -> Integer, Character, Boolean, String

 	int price = 750; // 750 -> literal

Main method:

    public static void main(String[] args) {
    }

    public -> to call this method from anywhere by JVM
    static -> can be called without creating an object of the class & memory will be allocated to this..
    void -> no return value to JVM
    main -> name of method
    String[] args -> one argument/parameter of type String array

Git : github, gitlab, bitbucket.. -> distributed version control system

	1. signup
	2. create a repository
	3. add files/folders

Bring from your github account to your local machine :	

git clone https://github.com/kavyamaremalla/JFS10WD.git

Add files to github account : Committing to git

	local ->  staging(temporary storage of files to be committed)  -> github account

git status -> file status 
git add <fileName which you want to send to github account> or for all files -> git add .
git commit -m "Your Message Here : Reason why you are committing" -> local to staging
git push -> from staging to github account

git pull -> changes from github  made by others to be in your local machine


Keywords
	void -> no return type
	static -> memory allocated first to this method

22/7/24 :
Arrays :
Create Arrays :

String[] carBrands = {"Volvo", "Hyundai", "Kia" , String.valueOf(7)};

Integer[] carPrice = {76, 89, 90, 12, Integer.parseInt("45")};

Read Ops on Array:

Index -> position of an element & starts with 0

    array[indexPosition] -> return element in that particular position

    carBrands[4] -> ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    carBrands.length -> length of the array (here it's 4)

    Read an array -> Arrays.toString(carBrands)

    for/for-each on array -> reads elements separately

Update ->

    nameOfArray[indexPositionToUpdate]  = updatedValue

Delete an element from array without conversion to array list.

Removing element from array & insert an element into array without using arraylist

create objects

    1. using new keyword
    2. using new instance
    3. using clone() method
    4. using deserialization
    5. using newInstance() of constructor class

23/07/24    

Access Modifiers -> public, private, protected, default
	- class, method, variables & constructors

package -> group of classes within same space

array sorting -> with and without in-built sort method	
array compares
array equals, fill

Strings : 

	 - charAt(), compareTo(), compareToIgnoreCase(), concat(),contains(), toLowerCase , toUpperCase, equals, endsWith, startsWith, matches, replaces, split, length, split,
	 subString -> string sequence ; subSequence -> CharSequence, toCharArray, toString, String.valueOf, trim

Task :  sort a string array using compareTo

24/07/24

regex, string pool, string builder & buffer, Oops, constructors
